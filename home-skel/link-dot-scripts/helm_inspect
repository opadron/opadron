#! /usr/bin/env python3

import collections
import contextlib
import io
import os
import re
import subprocess
import shutil
import sys
import tempfile
import yaml


def normalize_file_path(arg):
    if arg in (None, '-'):
        return None
    if os.path.abspath(arg) == '/dev/stdin':
        return None
    return arg


_tmp_dir = None
_stack = None


def get_tmp_dir():
    global _tmp_dir
    if _tmp_dir is None:
        _tmp_dir = _stack.enter_context(tempfile.TemporaryDirectory())
    return _tmp_dir


_helm_env = None


def get_helm_env():
    global _helm_env
    if _helm_env is None:
        tmp = get_tmp_dir()

        helm_cache_dir = os.path.join(tmp, 'helm-cache')
        helm_config_dir = os.path.join(tmp, 'helm-config')
        helm_data_dir = os.path.join(tmp, 'helm-data')
        for dir_ in (helm_cache_dir, helm_config_dir, helm_data_dir):
            os.mkdir(dir_)

        _helm_env = collections.ChainMap(
            {
                'HELM_CACHE_HOME': helm_cache_dir,
                'HELM_CONFIG_HOME': helm_config_dir,
                'HELM_DATA_HOME': helm_data_dir,
            },
            os.environ,
        )

    return _helm_env


def helm(*args, **kwargs):
    input = kwargs.pop('input', None)
    kwargs.setdefault('env', get_helm_env())
    kwargs.setdefault('text', True)

    if input is None:
        kwargs.setdefault('stdout', subprocess.DEVNULL)
        return subprocess.check_call(['helm'] + list(args), **kwargs)

    kwargs.setdefault('stdin', subprocess.PIPE)
    proc = subprocess.Popen(['helm'] + list(args), **kwargs)
    with proc:
        proc.communicate(input=input)
    if proc.returncode != 0:
        raise subprocess.CalledProcessError(proc.returncode, proc.args)


file_paths = list(map(normalize_file_path, sys.argv[1:] or [None]))
file_paths = file_paths[:1]
fd_table = {}
input_table = {}
repo_table = {}
repo_counter = 0

with contextlib.ExitStack() as stack:
    _stack = stack
    for path in file_paths:
        # resolve input path to a fd
        if path is None:  # stdin
            fd = sys.stdin
        else:
            fd = fd_table.get(path, None)
            if fd is None:
                fd = stack.enter_context(open(path))
                fd_table[path] = fd

        # resolve fd to a data structure
        data = input_table.get(fd)
        if data is None:
            data = yaml.full_load(fd)
            repo = data['spec']['repo']
            chart = data['spec']['chart']
            version = data['spec'].get('version', None)
            meta = data['metadata']
            namespace = (
                data['spec'].get('targetNamespace', None) or
                meta.get('namespace', 'default')
            )
            data = {
                'chart': chart,
                'namespace': namespace,
                'release': meta['name'],
                'repo': repo,
                'version': version,
            }
            input_table[fd] = data

        # resolve the repo url to local identifier
        repo_index = repo_table.get(data['repo'], None)
        if repo_index is None:
            repo_index = repo_counter
            repo_counter += 1
            repo_table[data['repo']] = repo_index
            helm('repo', 'add', f'repo{repo_index}', data['repo'])

    helm('repo', 'update')

    for path in file_paths:
        data = input_table[fd_table.get(path, sys.stdin)]
        repo_index = repo_table[data['repo']]

        version_args = []
        version = data['version']
        if version is not None:
            version_args = ['--version', version]

        staging_dir = os.path.join(get_tmp_dir(), 'staging')
        try:
            os.mkdir(staging_dir)
        except FileExistsError:
            pass
        os.chdir(staging_dir)
        helm(
            'pull',
            f'repo{repo_index}/{data["chart"]}',
            *version_args,
        )
        artifact = next(os.walk(staging_dir))[2][0]

        helm_chart_cache_dir = os.path.join(os.environ['HOME'], '._helm_cache')
        helm_chart_dir = os.path.join(os.environ['HOME'], '.helm-charts')

        try:
            os.mkdir(helm_chart_cache_dir)
        except FileExistsError:
            pass
        try:
            os.mkdir(helm_chart_dir)
        except FileExistsError:
            pass

        if version is None:  # infer version from filename
            M = re.match(r'(.*?)\-(([0-9]+)(\.[0-9]+)*)\.[a-zA-Z0-9]+', artifact)
            if M is not None:
                version = M.group(2)
        if version is None:
            version = 'unknown-version'

        extension = []
        for x in artifact.split('.')[1:]:
            try:
                int(x)
            except ValueError:
                extension.append(x)
        extension = '.'.join(extension)
        if extension:
            extension = f'.{extension}'

        cache_path = os.path.join(
            helm_chart_cache_dir,
            data['chart'],
            f'{version}{extension}',
        )

        os.makedirs(os.path.join(helm_chart_cache_dir, data['chart']), exist_ok=True)
        shutil.move(
            os.path.join(staging_dir, artifact),
            cache_path,
        )

        subprocess.check_call(
            [
                'tar',
                'xf',
                cache_path,
            ],
            stdout=subprocess.DEVNULL,
        )

        unpacked_path = os.path.join(
            helm_chart_dir,
            data['chart'],
            f'{version}',
        )

        if os.path.isdir(unpacked_path):
            shutil.rmtree(unpacked_path)

        # detect uncapped tarball
        _, dirs, files = next(os.walk(staging_dir))
        if len(dirs) == 1 and not files:  # capped
            os.makedirs(os.path.dirname(unpacked_path), exist_ok=True)
            shutil.move(
                os.path.join(staging_dir, dirs[0]),
                unpacked_path,
            )
        else:  # uncapped
            os.makedirs(unpacked_path, exist_ok=True)
            for x in dirs + files:
                shutil.move(
                    os.path.join(staging_dir, x),
                    os.path.join(unpacked_path, x),
                )

        print(unpacked_path)

