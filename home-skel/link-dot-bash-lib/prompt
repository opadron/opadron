#! /usr/bin/env bash

mload commonlib
mload colors
mload preexec
mload term_sequences
mload tmp_dir
mload queues

function check_sum() {
    for com in md5 md5sum shasum ; do
        if check_exit_code _ which $com ; then
            echo "$*" | "$com"
            break
        fi
    done
}

__prompt_shell_level=
__prompt_number_of_jobs=
__prompt_git_branch=
__prompt_git_remote_status=

__prompt_shell_level_flag=
__prompt_right=

# PROMPT_COMMAND=__prompt_update

preexec() {
    if [ "$__update_prompt_main_called" '=' 0 ] ; then
        return
    fi
    __update_prompt_main_called=0

    local com="$@"

    if [ -z "$com" -o "${com:0:5}" '=' 'clear' ] ; then
        return
    fi

    return

    local n="${#com}"

    local nlines=$(( (n - 1)/COLUMNS + 1 ))
    local ncols=$(( n % COLUMNS ))
    local i

    for ((i=0;i<nlines;++i)) ; do
        term_cursor_up
    done

    term_cursor_left "$(( ncols + 20 ))"

    echo -n "$TERM_COLORS_RESET"
    echo -ne '\x1b[0;7m'
    term_clear_to_end
    if [ "$n" -gt "$COLUMNS" ] ; then
        n="$(( COLUMNS - 3 ))"
        com="${com:0:$n}..."
    else
        for ((i=n;i<COLUMNS;++i)) ; do
            com="${com} "
        done
    fi
    echo "$com"
    echo -n "$TERM_COLORS_RESET"
}

__prompt_dir="$( tmp_dir )"

__revparse_head() {
    GIT_OPTIONAL_LOCKS=0 git rev-parse $@ HEAD 2>/dev/null
    return $?
}

__print_subprompts() {
    local -a subprompts
    local -a subprompt_lengths

    local subprompt
    local subprompt_length

    local hn="$( hostname )"
    subprompt="${subprompt}$TERM_COLORS_BOLD_CYAN["
    subprompt="${subprompt}$TERM_COLORS_CYAN$USER"
    subprompt="${subprompt}$TERM_COLORS_BOLD_CYAN@"
    subprompt="${subprompt}$TERM_COLORS_BOLD_BLUE$hn"
    subprompt="${subprompt}$TERM_COLORS_BOLD_CYAN]"
    subprompt="${subprompt}$TERM_COLORS_RESET"

    subprompt_length="$(( ${#USER} + ${#hn} + 3 ))"

    subprompts[${#subprompts[@]}]="$subprompt"
    subprompt_lengths[${#subprompt_lengths[@]}]="$subprompt_length"


    queue_acquire_read "$__prompt_dir/git-head"
    local git_head="$( queue_read "$__prompt_dir/git-head" )"

    queue_acquire_read "$__prompt_dir/git-remote-status"
    local git_remote_status="$( queue_read "$__prompt_dir/git-remote-status" )"

    if [ -n "$git_head" ] ; then
        subprompt="$TERM_COLORS_BOLD_RED("
        subprompt="${subprompt}$TERM_COLORS_RED$git_head"

        subprompt_length="$(( ${#git_head} + 2 ))"

        if [ -n "$git_remote_status" ] ; then
            subprompt="${subprompt}: "
            subprompt="${subprompt}$TERM_COLORS_YELLOW"
            subprompt="${subprompt}${git_remote_status::1}"
            subprompt="${subprompt}$TERM_COLORS_BOLD_YELLOW"
            subprompt="${subprompt}${git_remote_status:1}"

        subprompt_length="$((
            subprompt_length + ${git_remote_status} + 2))"
        fi

        subprompt="${subprompt}$TERM_COLORS_BOLD_RED)"
        subprompt="${subprompt}$TERM_COLORS_RESET"

        subprompts[${#subprompts[@]}]="$subprompt"
        subprompt_lengths[${#subprompt_lengths[@]}]="$subprompt_length"
    fi

    queue_acquire_read "$__prompt_dir/py-venv"
    local py_venv="$( queue_read "$__prompt_dir/py-venv" )"
    if [ -n "$py_venv" ] ; then
        subprompt="$TERM_COLORS_BOLD_GREEN(\$"
        subprompt="${subprompt}$TERM_COLORS_GREEN"
        subprompt="${subprompt}$py_venv"
        subprompt="${subprompt}$TERM_COLORS_BOLD_GREEN)"
        subprompt="${subprompt}$TERM_COLORS_RESET"

        subprompt_length="$(( subprompt_length + ${#py_venv} + 3 ))"

        subprompts[${#subprompts[@]}]="$subprompt"
        subprompt_lengths[${#subprompt_lengths[@]}]="$subprompt_length"
    fi

    botprompt="$( pwd )"

    term_clear_to_end
    echo
    for p in "${subprompts[@]}" ; do
        echo
    done

    term_cursor_up
    for p in "${subprompts[@]}" ; do
        term_cursor_up
    done

    term_cursor_down
    for p in "${subprompts[@]}" ; do
        echo "$p"
    done
    echo -n "$botprompt"
    echo -ne '\r'

    term_cursor_up
    for p in "${subprompts[@]}" ; do
        term_cursor_up
    done

    local n_term="$( term_get_width )"
    local n_padding="$(( n_term - subprompt_length - 10 ))"
}

__update_prompt() {
    local prompt=""
    prompt="\\[$TERM_COLORS_BOLD_YELLOW\\]"
    # prompt="${prompt}\\[$( echo -e '\xce' )\\]"
    # prompt="${prompt}$( echo -e '\x94' )"
    prompt="${prompt}\\[$( echo -e '\xe2' )\\]"
    prompt="${prompt}$( echo -e '\x96' )"
    prompt="${prompt}\\[$( echo -e '\xb6' )\\]"
    prompt="${prompt}\\[$TERM_COLORS_RESET\\]  "

    if [ "$USER" '=' 'root' ] ; then
        prompt=""
        prompt="${prompt}\\[$TERM_COLORS_RESET\\]"
        prompt="${prompt}\\[$( echo -e '\x1b[1;7;31m' )\\]"
        prompt="${prompt}\\[$( echo -e '\xe2' )\\]"
        prompt="${prompt}$( echo -e '\x88' )"
        prompt="${prompt}$( echo -e '\x9a' )"
        prompt="${prompt}\\[$TERM_COLORS_RESET\\] "
        prompt="${prompt}\\[$( echo -e '\x1b[1;5;7;31m' )\\]"
        prompt="${prompt}\\[$TERM_COLORS_BOLD_RED\\]"
    fi

    echo "$prompt" | queue_write "$__prompt_dir/prompt"

    prompt="\\[$( term_clear_right )\\] "
    prompt="${prompt}\\[$TERM_COLORS_BOLD_YELLOW\\]"
    prompt="${prompt}\\[$( echo -e '\xe2' )\\]"
    prompt="${prompt}$( echo -e '\x96' )"
    prompt="${prompt}\\[$( echo -e '\xb7' )\\]"
    prompt="${prompt}\\[$TERM_COLORS_RESET\\] "
    echo "$prompt" | queue_write "$__prompt_dir/prompt2"
}

__update_git() {
    local x=

    local git_head="$( __revparse_head --abbrev-ref )"
    local git_remote_status

    if [ "$?" '=' '0' ] ; then
        if [ "$git_head" '=' 'HEAD' ] ; then
            git_head="$( __revparse_head | cut -c1-8 )..."
            git_remote_status='x'
        fi
    fi

    if [ "$git_remote_status" '=' 'x' ] ; then
        git_remote_status=''
    else
        git_remote_status="$(
            GIT_OPTIONAL_LOCKS=0 git \
                status --branch --porcelain --ignore-submodules=dirty \
                    2> /dev/null |
            head -n 1 |
            grep '\[\(ahead\|behind\) [0-9]\+\]' |
            sed -e 's/^.*\(ahead\) \([0-9][0-9]*\).*$/+\2/g' |
            sed -e 's/^.*\(behind\) \([0-9][0-9]*\).*$/-\2/g'
        )"
    fi

    if [ -n "$git_head" ] ; then
        x='GIT_OPTIONAL_LOCKS=0'
        x="${x} git status"
        x="${x} --porcelain"
        x="${x} --ignore-submodules=dirty"

        if $x 2> /dev/null | grep -q -v '^?? .*$'; then
            git_head="${git_head}*"
        fi
    fi

    echo "$git_head" | queue_write "$__prompt_dir/git-head"
    echo "$git_remote_status" | queue_write "$__prompt_dir/git-remote-status"
}

__update_py_venv() {
    local py_venv="$VIRTUAL_ENV"
    if [ -n "$py_venv" ] ; then
        py_venv="$( basename "$py_venv" )"
    fi

    echo "$py_venv" | queue_write "$__prompt_dir/py-venv"
}

(
    set -m
    (
        queue_init "$__prompt_dir/query"
        queue_init "$__prompt_dir/prompt"
        queue_init "$__prompt_dir/prompt2"

        __update_prompt
        queue_make_readable "$__prompt_dir/prompt"
        queue_make_readable "$__prompt_dir/prompt2"

        queue_make_writable "$__prompt_dir/query"

        local q_time
        local last_q_time

        while true ; do
            last_q_time=''

            while true ; do
                q_time="$( date +%s%N )"


                if queue_acquire_read "$__prompt_dir/query" 0.010 100; then
                    last_q_time="$q_time"
                    cd "$( queue_read "$__prompt_dir/query" )"
                    queue_make_writable "$__prompt_dir/query"
                fi

                if [ -n "$last_q_time" -a \
                    "$(( (q_time - last_q_time)/10000000 ))" -gt '100' ] ; then
                    break
                fi
            done

            __update_prompt
            queue_make_readable "$__prompt_dir/prompt"
            queue_make_readable "$__prompt_dir/prompt2"
        done
    ) &>/dev/null &
    (
        queue_init "$__prompt_dir/query"
        queue_init "$__prompt_dir/git-head"
        queue_init "$__prompt_dir/git-remote-status"

        __update_git
        queue_make_readable "$__prompt_dir/git-head"
        queue_make_readable "$__prompt_dir/git-remote-status"

        queue_make_writable "$__prompt_dir/query"

        local q_time
        local last_q_time

        while true ; do
            last_q_time=''

            while true ; do
                q_time="$( date +%s%N )"

                if queue_acquire_read "$__prompt_dir/query" 0.010 100; then
                    last_q_time="$q_time"
                    cd "$( queue_read "$__prompt_dir/query" )"
                    queue_make_writable "$__prompt_dir/query"
                fi

                if [ -n "$last_q_time" -a \
                    "$(( (q_time - last_q_time)/10000000 ))" -gt '100' ] ; then
                    break
                fi
            done

            __update_git
            queue_make_readable "$__prompt_dir/git-head"
            queue_make_readable "$__prompt_dir/git-remote-status"
        done
    ) &>/dev/null &
    (
        queue_init "$__prompt_dir/query"
        queue_init "$__prompt_dir/py-venv"

        __update_py_venv
        queue_make_readable "$__prompt_dir/py-venv"

        queue_make_writable "$__prompt_dir/query"

        local q_time
        local last_q_time

        while true ; do
            last_q_time=''

            while true ; do
                q_time="$( date +%s%N )"

                if queue_acquire_read "$__prompt_dir/query" 0.010 100; then
                    last_q_time="$q_time"
                    cd "$( queue_read "$__prompt_dir/query" )"
                    queue_make_writable "$__prompt_dir/query"
                fi

                if [ -n "$last_q_time" -a \
                    "$(( (q_time - last_q_time)/10000000 ))" -gt '100' ] ; then
                    break
                fi
            done

            __update_py_venv
            queue_make_readable "$__prompt_dir/py-venv"
        done
    ) &>/dev/null &
)

__update_prompt_main_called=0
__update_prompt_main_first_call=1
__update_prompt_main() {
    local time="$( date +%s%N )"
    if [ -z "$__last_upm_time" -o \
        "$(( (time - __last_upm_time)/10000000 ))" -gt '100' ]
    then
        __last_upm_time="$time"
        __update_prompt_main_called=1
        if [ "$__update_prompt_main_first_call" '=' '1' ] ; then
            local q
            for q in prompt git-head git-remote-status py-venv ; do
                until queue_acquire_read "$__prompt_dir/$q" 0.010 100 ; do
                    true
                done
            done

            PS1="$( queue_read "$__prompt_dir/prompt" )"
            PS2="$( queue_read "$__prompt_dir/prompt2" )"
            __update_prompt_main_first_call=0
        else
            if queue_acquire_read "$__prompt_dir/prompt" ; then
                PS1="$( queue_read "$__prompt_dir/prompt" )"
            fi
            if queue_acquire_read "$__prompt_dir/prompt2" ; then
                PS2="$( queue_read "$__prompt_dir/prompt2" )"
            fi
        fi

        if queue_acquire_write "$__prompt_dir/query" ; then
            pwd | queue_write "$__prompt_dir/query"
            queue_make_readable "$__prompt_dir/query"
        fi
    fi

    __print_subprompts
}

if [ -z "$DISABLE_PROMPT" ] ; then
    PROMPT_COMMAND=__update_prompt_main
fi
