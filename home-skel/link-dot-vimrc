scriptencoding utf-8

set encoding=utf-8
set fileencoding=utf-8
set termencoding=utf-8

filetype off

set rtp+=~/.vim/bundle/vundle.vim
call vundle#begin()
execute 'Plugin ' . '''file://' . $HOME . '/.vim-modules/airline'''
execute 'Plugin ' . '''file://' . $HOME . '/.vim-modules/custom'''
execute 'Plugin ' . '''file://' . $HOME . '/.vim-modules/indentline'''
execute 'Plugin ' . '''file://' . $HOME . '/.vim-modules/mac-classic'''
execute 'Plugin ' . '''file://' . $HOME . '/.vim-modules/sol'''
execute 'Plugin ' . '''file://' . $HOME . '/.vim-modules/solarized'''
execute 'Plugin ' . '''file://' . $HOME . '/.vim-modules/supertab'''
execute 'Plugin ' . '''file://' . $HOME . '/.vim-modules/youcompleteme'''
execute 'Plugin ' . '''file://' . $HOME . '/.vim-modules/ultisnips'''
execute 'Plugin ' . '''file://' . $HOME . '/.vim-modules/unite'''
execute 'Plugin ' . '''file://' . $HOME . '/.vim-modules/vimproc'''
execute 'Plugin ' . '''file://' . $HOME . '/.vim-modules/virtualenv'''
execute 'Plugin ' . '''file://' . $HOME . '/.vim-modules/vividchalk'''
execute 'Plugin ' . '''file://' . $HOME . '/.vim-modules/yaml'''
call vundle#end()

"# BASIC OPTIONS ##############################################################"

filetype plugin indent on

set nocompatible
set cpoptions+=v
set backspace=0
set autoindent
set smartindent
set modeline
set ruler
set tabstop=4
set softtabstop=0
set shiftwidth=4
set expandtab
set scrolloff=10
set diffopt+=vertical,foldcolumn:0
set hlsearch
set incsearch
set number
set numberwidth=4
set foldcolumn=0
set foldmethod=syntax
set wildmode=longest,list
set textwidth=80
set tags=./tags;/
set listchars=tab:╬═,trail:¶,extends:»,precedes:«,nbsp:¶
set list
set laststatus=2
set lazyredraw
set ttyfast
set re=0

" set undofile
" set conceallevel

set completeopt=longest,menuone,preview

if has("gui_running")
  set guioptions=cM
  set guifont=Courier\ Bold\ 14
  set columns=100
endif

let mapleader=","

"------------------------------------------------------------------------------"
"# COLOR/FORMATTING OPTIONS ###################################################"

syntax enable

let g:schemes = [
  \["dark" , ["vividchalk" , "vividchalk" ]],
  \["light", ["sol"        , "sol-term"   ]],
  \["light", ["solarized"  , "solarized"  ]],
  \["dark" , ["solarized"  , "solarized"  ]],
  \["light", ["mac_classic", "mac_classic"]]
\]

let g:scheme_index=-1

function CycleSchemes()
  let g:scheme_index = (g:scheme_index + 1)%len(g:schemes)
  let entry = g:schemes[g:scheme_index]

  if entry[1][0] == "solarized"
    let g:solarized_termtrans=1
    let g:solarized_bold=1
    let g:solarized_underline=1
    let g:solarized_italic=1
  endif

  execute "set background=" . entry[0]
  if has("gui_running")
    execute "colorscheme " . entry[1][0]
  else
    execute "colorscheme " . entry[1][1]
  endif
endfunction

call CycleSchemes()

set   cursorline   " highlight current line
set   cursorcolumn " highlight current column

highlight OverLength ctermbg=red ctermfg=white guibg=#592929
match OverLength /\%81v.\+/

set colorcolumn=+1

"------------------------------------------------------------------------------"
"# PLUGIN/FILETYPE-SPECIFIC OPTIONS ###########################################"

" indentLine
let g:indentLine_char='│'

" super tab
let g:SuperTabSetDefaultCompletionType="context"
let g:SuperTabLongestEnhanced=1
let g:SuperTabLongestHighlight=0
let g:SuperTabClosePreviewOnPopupClose=1

" make YCM compatible with UltiSnips (using supertab)
let g:ycm_key_list_select_completion = ['<C-n>', '<Down>']
let g:ycm_key_list_previous_completion = ['<C-p>', '<Up>']
let g:SuperTabDefaultCompletionType = '<C-n>'

" better key bindings for UltiSnipsExpandTrigger
let g:UltiSnipsExpandTrigger = "<tab>"
let g:UltiSnipsJumpForwardTrigger = "<tab>"
let g:UltiSnipsJumpBackwardTrigger = "<s-tab>"


if has("autocmd")
  autocmd FileType *
    \ if &omnifunc != '' |
    \   call SuperTabChain(&omnifunc, "<c-p>") |
    \   call SuperTabSetDefaultCompletionType("<c-x><c-u>") |
    \ endif
endif

" unite
if has("autocmd")
  autocmd FileType unite setlocal cpoptions-=v
endif


" javacomplete
if has("autocmd")
    autocmd Filetype java setlocal omnifunc=javacomplete#Complete
    autocmd Filetype java setlocal omnifunc=javacomplete#CompleteParamsInfo
endif

" airline
let g:airline_left_sep=" "
let g:airline_right_sep=" "
let g:airline_detect_modified=1
let g:airline_detect_paste=1
let g:airline_detect_iminsert=0
let g:airline_inactive_collapse=1
let g:airline_exclude_preview=1

" vimshell
let g:vimshell_prompt='Δ '
if has("autocmd")
  autocmd FileType vimshell setlocal nonumber
  autocmd FileType vimshell highlight clear OverLength
  autocmd FileType vimshell set nocursorline
  autocmd FileType vimshell set nocursorcolumn
endif

" misc autocmds
if has("autocmd")
  autocmd FileType python setlocal completeopt-=preview
  autocmd FileType python setlocal omnifunc=

  autocmd FileType html setlocal tabstop=2
  autocmd FileType html setlocal softtabstop=2
  autocmd FileType html setlocal shiftwidth=2

  autocmd FileType javascript setlocal tabstop=2
  autocmd FileType javascript setlocal softtabstop=2
  autocmd FileType javascript setlocal shiftwidth=2

  autocmd FileType json setlocal tabstop=2
  autocmd FileType json setlocal softtabstop=2
  autocmd FileType json setlocal shiftwidth=2
  let g:vim_json_syntax_conceal = 0
  let g:indentLine_noConcealCursor=''
  let g:indentLine_concealcursor=''

  autocmd FileType yaml setlocal tabstop=2
  autocmd FileType yaml setlocal softtabstop=2
  autocmd FileType yaml setlocal shiftwidth=2

  autocmd FileType vim setlocal tabstop=2
  autocmd FileType vim setlocal softtabstop=2
  autocmd FileType vim setlocal shiftwidth=2
endif

"------------------------------------------------------------------------------"
"# KEY REMAPPINGS #############################################################"

nnoremap H :pop<CR>
nnoremap L <C-]>

nnoremap <C-H> <C-w>h
nnoremap <C-J> <C-w>j
nnoremap <C-K> <C-w>k
nnoremap <C-L> <C-w>l

nnoremap = 10<C-w>>
nnoremap - 10<C-w><
nnoremap + 5<C-w>+
nnoremap _ 5<C-w>-

let unite_options=""
" let unite_options.=" -vertical"
" let unite_options.=" -tab"
let unite_options.=" -buffer-name=unite"
let unite_options.=" -toggle"
let unite_options.=" -start-insert"
" let unite_options.=" -auto-preview"
" let unite_options.=" -auto-highlight"
let unite_options.=" -auto-resize"
let unite_options.=" -no-restore"

" nnoremap <Leader><Leader> :Unite -no-split -start-insert file_rec<CR>
nnoremap <Leader><Space>
  \ :execute "Unite" . unite_options<CR>

nnoremap <Leader>/ :execute "Unite" . unite_options . " line"<CR>

nnoremap <Leader><Leader>
  \ :execute "Unite" . unite_options . " file_rec/async"<CR>

nnoremap <Leader>\| :vsplit<CR>
nnoremap <Leader>- :split<CR>

nnoremap <Leader><Tab> :call CycleSchemes()<CR>
" nnoremap <Leader><Space> :VimShell<CR>

"------------------------------------------------------------------------------"

